// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PBFTService_ClientRequest_FullMethodName              = "/pbft.PBFTService/ClientRequest"
	PBFTService_PrePrepareBroadcast_FullMethodName        = "/pbft.PBFTService/PrePrepareBroadcast"
	PBFTService_PrepareBroadcast_FullMethodName           = "/pbft.PBFTService/PrepareBroadcast"
	PBFTService_CommitBroadcast_FullMethodName            = "/pbft.PBFTService/CommitBroadcast"
	PBFTService_ViewChangeBroadcast_FullMethodName        = "/pbft.PBFTService/ViewChangeBroadcast"
	PBFTService_NewViewBroadcast_FullMethodName           = "/pbft.PBFTService/NewViewBroadcast"
	PBFTService_CheckpointBroadcast_FullMethodName        = "/pbft.PBFTService/CheckpointBroadcast"
	PBFTService_StateTransfer_FullMethodName              = "/pbft.PBFTService/StateTransfer"
	PBFTService_CrossShardRequestInitiate_FullMethodName  = "/pbft.PBFTService/CrossShardRequestInitiate"
	PBFTService_ShardPrepareBroadcast_FullMethodName      = "/pbft.PBFTService/ShardPrepareBroadcast"
	PBFTService_ShardCommitBroadcast_FullMethodName       = "/pbft.PBFTService/ShardCommitBroadcast"
	PBFTService_CrossShardResponseFinalize_FullMethodName = "/pbft.PBFTService/CrossShardResponseFinalize"
)

// PBFTServiceClient is the client API for PBFTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PBFTServiceClient interface {
	// Client interactions
	ClientRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// PBFT Phases
	PrePrepareBroadcast(ctx context.Context, in *PrePrepare, opts ...grpc.CallOption) (*Ack, error)
	PrepareBroadcast(ctx context.Context, in *Prepare, opts ...grpc.CallOption) (*Ack, error)
	CommitBroadcast(ctx context.Context, in *Commit, opts ...grpc.CallOption) (*Ack, error)
	// View change protocol
	ViewChangeBroadcast(ctx context.Context, in *ViewChange, opts ...grpc.CallOption) (*Ack, error)
	NewViewBroadcast(ctx context.Context, in *NewView, opts ...grpc.CallOption) (*Ack, error)
	// Checkpointing and state transfer
	CheckpointBroadcast(ctx context.Context, in *Checkpoint, opts ...grpc.CallOption) (*Ack, error)
	StateTransfer(ctx context.Context, in *StateTransferRequest, opts ...grpc.CallOption) (*StateTransferResponse, error)
	// Cross-shard transaction handling
	CrossShardRequestInitiate(ctx context.Context, in *CrossShardRequest, opts ...grpc.CallOption) (*Ack, error)
	ShardPrepareBroadcast(ctx context.Context, in *ShardPrepare, opts ...grpc.CallOption) (*Ack, error)
	ShardCommitBroadcast(ctx context.Context, in *ShardCommit, opts ...grpc.CallOption) (*Ack, error)
	CrossShardResponseFinalize(ctx context.Context, in *CrossShardResponse, opts ...grpc.CallOption) (*Ack, error)
}

type pBFTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPBFTServiceClient(cc grpc.ClientConnInterface) PBFTServiceClient {
	return &pBFTServiceClient{cc}
}

func (c *pBFTServiceClient) ClientRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, PBFTService_ClientRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) PrePrepareBroadcast(ctx context.Context, in *PrePrepare, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, PBFTService_PrePrepareBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) PrepareBroadcast(ctx context.Context, in *Prepare, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, PBFTService_PrepareBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) CommitBroadcast(ctx context.Context, in *Commit, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, PBFTService_CommitBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) ViewChangeBroadcast(ctx context.Context, in *ViewChange, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, PBFTService_ViewChangeBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) NewViewBroadcast(ctx context.Context, in *NewView, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, PBFTService_NewViewBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) CheckpointBroadcast(ctx context.Context, in *Checkpoint, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, PBFTService_CheckpointBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) StateTransfer(ctx context.Context, in *StateTransferRequest, opts ...grpc.CallOption) (*StateTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StateTransferResponse)
	err := c.cc.Invoke(ctx, PBFTService_StateTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) CrossShardRequestInitiate(ctx context.Context, in *CrossShardRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, PBFTService_CrossShardRequestInitiate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) ShardPrepareBroadcast(ctx context.Context, in *ShardPrepare, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, PBFTService_ShardPrepareBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) ShardCommitBroadcast(ctx context.Context, in *ShardCommit, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, PBFTService_ShardCommitBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) CrossShardResponseFinalize(ctx context.Context, in *CrossShardResponse, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, PBFTService_CrossShardResponseFinalize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PBFTServiceServer is the server API for PBFTService service.
// All implementations must embed UnimplementedPBFTServiceServer
// for forward compatibility.
type PBFTServiceServer interface {
	// Client interactions
	ClientRequest(context.Context, *Request) (*Response, error)
	// PBFT Phases
	PrePrepareBroadcast(context.Context, *PrePrepare) (*Ack, error)
	PrepareBroadcast(context.Context, *Prepare) (*Ack, error)
	CommitBroadcast(context.Context, *Commit) (*Ack, error)
	// View change protocol
	ViewChangeBroadcast(context.Context, *ViewChange) (*Ack, error)
	NewViewBroadcast(context.Context, *NewView) (*Ack, error)
	// Checkpointing and state transfer
	CheckpointBroadcast(context.Context, *Checkpoint) (*Ack, error)
	StateTransfer(context.Context, *StateTransferRequest) (*StateTransferResponse, error)
	// Cross-shard transaction handling
	CrossShardRequestInitiate(context.Context, *CrossShardRequest) (*Ack, error)
	ShardPrepareBroadcast(context.Context, *ShardPrepare) (*Ack, error)
	ShardCommitBroadcast(context.Context, *ShardCommit) (*Ack, error)
	CrossShardResponseFinalize(context.Context, *CrossShardResponse) (*Ack, error)
	mustEmbedUnimplementedPBFTServiceServer()
}

// UnimplementedPBFTServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPBFTServiceServer struct{}

func (UnimplementedPBFTServiceServer) ClientRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientRequest not implemented")
}
func (UnimplementedPBFTServiceServer) PrePrepareBroadcast(context.Context, *PrePrepare) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrePrepareBroadcast not implemented")
}
func (UnimplementedPBFTServiceServer) PrepareBroadcast(context.Context, *Prepare) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareBroadcast not implemented")
}
func (UnimplementedPBFTServiceServer) CommitBroadcast(context.Context, *Commit) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitBroadcast not implemented")
}
func (UnimplementedPBFTServiceServer) ViewChangeBroadcast(context.Context, *ViewChange) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewChangeBroadcast not implemented")
}
func (UnimplementedPBFTServiceServer) NewViewBroadcast(context.Context, *NewView) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewViewBroadcast not implemented")
}
func (UnimplementedPBFTServiceServer) CheckpointBroadcast(context.Context, *Checkpoint) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckpointBroadcast not implemented")
}
func (UnimplementedPBFTServiceServer) StateTransfer(context.Context, *StateTransferRequest) (*StateTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateTransfer not implemented")
}
func (UnimplementedPBFTServiceServer) CrossShardRequestInitiate(context.Context, *CrossShardRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossShardRequestInitiate not implemented")
}
func (UnimplementedPBFTServiceServer) ShardPrepareBroadcast(context.Context, *ShardPrepare) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShardPrepareBroadcast not implemented")
}
func (UnimplementedPBFTServiceServer) ShardCommitBroadcast(context.Context, *ShardCommit) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShardCommitBroadcast not implemented")
}
func (UnimplementedPBFTServiceServer) CrossShardResponseFinalize(context.Context, *CrossShardResponse) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossShardResponseFinalize not implemented")
}
func (UnimplementedPBFTServiceServer) mustEmbedUnimplementedPBFTServiceServer() {}
func (UnimplementedPBFTServiceServer) testEmbeddedByValue()                     {}

// UnsafePBFTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PBFTServiceServer will
// result in compilation errors.
type UnsafePBFTServiceServer interface {
	mustEmbedUnimplementedPBFTServiceServer()
}

func RegisterPBFTServiceServer(s grpc.ServiceRegistrar, srv PBFTServiceServer) {
	// If the following call pancis, it indicates UnimplementedPBFTServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PBFTService_ServiceDesc, srv)
}

func _PBFTService_ClientRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).ClientRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_ClientRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).ClientRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_PrePrepareBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrePrepare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).PrePrepareBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_PrePrepareBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).PrePrepareBroadcast(ctx, req.(*PrePrepare))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_PrepareBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prepare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).PrepareBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_PrepareBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).PrepareBroadcast(ctx, req.(*Prepare))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_CommitBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Commit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).CommitBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_CommitBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).CommitBroadcast(ctx, req.(*Commit))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_ViewChangeBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).ViewChangeBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_ViewChangeBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).ViewChangeBroadcast(ctx, req.(*ViewChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_NewViewBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).NewViewBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_NewViewBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).NewViewBroadcast(ctx, req.(*NewView))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_CheckpointBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Checkpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).CheckpointBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_CheckpointBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).CheckpointBroadcast(ctx, req.(*Checkpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_StateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).StateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_StateTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).StateTransfer(ctx, req.(*StateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_CrossShardRequestInitiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrossShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).CrossShardRequestInitiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_CrossShardRequestInitiate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).CrossShardRequestInitiate(ctx, req.(*CrossShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_ShardPrepareBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardPrepare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).ShardPrepareBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_ShardPrepareBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).ShardPrepareBroadcast(ctx, req.(*ShardPrepare))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_ShardCommitBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardCommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).ShardCommitBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_ShardCommitBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).ShardCommitBroadcast(ctx, req.(*ShardCommit))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_CrossShardResponseFinalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrossShardResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).CrossShardResponseFinalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_CrossShardResponseFinalize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).CrossShardResponseFinalize(ctx, req.(*CrossShardResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// PBFTService_ServiceDesc is the grpc.ServiceDesc for PBFTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PBFTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbft.PBFTService",
	HandlerType: (*PBFTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientRequest",
			Handler:    _PBFTService_ClientRequest_Handler,
		},
		{
			MethodName: "PrePrepareBroadcast",
			Handler:    _PBFTService_PrePrepareBroadcast_Handler,
		},
		{
			MethodName: "PrepareBroadcast",
			Handler:    _PBFTService_PrepareBroadcast_Handler,
		},
		{
			MethodName: "CommitBroadcast",
			Handler:    _PBFTService_CommitBroadcast_Handler,
		},
		{
			MethodName: "ViewChangeBroadcast",
			Handler:    _PBFTService_ViewChangeBroadcast_Handler,
		},
		{
			MethodName: "NewViewBroadcast",
			Handler:    _PBFTService_NewViewBroadcast_Handler,
		},
		{
			MethodName: "CheckpointBroadcast",
			Handler:    _PBFTService_CheckpointBroadcast_Handler,
		},
		{
			MethodName: "StateTransfer",
			Handler:    _PBFTService_StateTransfer_Handler,
		},
		{
			MethodName: "CrossShardRequestInitiate",
			Handler:    _PBFTService_CrossShardRequestInitiate_Handler,
		},
		{
			MethodName: "ShardPrepareBroadcast",
			Handler:    _PBFTService_ShardPrepareBroadcast_Handler,
		},
		{
			MethodName: "ShardCommitBroadcast",
			Handler:    _PBFTService_ShardCommitBroadcast_Handler,
		},
		{
			MethodName: "CrossShardResponseFinalize",
			Handler:    _PBFTService_CrossShardResponseFinalize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
